{"version":3,"sources":["../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/php.js","../node_modules/refractor/lang/phpdoc.js"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases","javadoclike","javaDocLike","parameter","pattern","lookbehind","keyword","punctuation","defineProperty","docLanguage","forEach","lang","callback","definition","alias","insertBefore","RegExp","Array","isArray","l","docCommentSupport","inside","rest","addSupport","refractorMarkupTemplating","require","php","register","comment","constant","number","operator","delimiter","variable","package","greedy","function","property","string_interpolation","string","interpolation","attribute","hooks","add","test","refractorPhp","refractorJavadoclike","phpdoc","typeExpression","source","extend"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_phpdoc.9d24d254.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/,\n      /\\b(?:null)\\b/i\n    ]\n    var number = /\\b0b[01]+\\b|\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      keyword: [\n        {\n          pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*[a-z0-9_|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[a-z0-9_|]\\|\\s*)(?:null|false)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:null|false)\\b/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i\n      ],\n      'argument-name': /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      'class-name': [\n        {\n          pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: /\\w+\\s*(?=\\()/,\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string\n    })\n    Prism.languages.insertBefore('php', 'variable', {\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorPhp = require('./php.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = phpdoc\nphpdoc.displayName = 'phpdoc'\nphpdoc.aliases = []\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp(\n          '(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' +\n            typeExpression +\n            '\\\\s+)?)\\\\$\\\\w+'\n        ),\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' +\n              typeExpression\n          ),\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n            punctuation: /[|\\\\[\\]()]/\n          }\n        }\n      ]\n    })\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc)\n  })(Prism)\n}\n"],"sourceRoot":""}